profit_value[i, 3] <- expect_profit(confuse)
}
pred_test$Yes
# set threshold
thres <- pred_test$Yes[i]
profit_value <- matrix(nrow = nrow(pred_test), ncol = 3)
# sort data
pred_test <- pred_test %>% arrange(desc(Yes))
# Sample 100 different thresholds
for (i in seq(1, nrow(pred_test), nrow(pred_test)*0.01)) {
# set threshold
thres <- pred_test$Yes[i]
profit_value[i, 1] <- thres
# classify
pred_test <- pred_test %>%
mutate(predicted = ifelse(Yes < thres, "No", "Yes"))
profit_value[i, 2] <- pred_test %>% filter(predicted == "Yes") %>% nrow()/nrow(pred_test)
# expected profit
confuse <- table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table()
profit_value[i, 3] <- expect_profit(confuse)
}
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table()
expect_profit(confuse)
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table()
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table()
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table()
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table() %>% matrix(nrow = 2, ncol = 2)
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table() %>% Matrix::sparseMatrix()
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table() %>% Matrix::as.matrix()
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table() %>% Matrix::Matrix(nrow = 2, ncol = 2, sparse = T)
expect_profit <- function(x){
profit <- x["Yes","Yes"]*490 +  x[1,2]*0 + x[2,2]*(-20) + x[1,1]*(-50)
return(profit)
}
table(Prediction = pred_test$pred, Actual = pred_test$actual) %>%
prop.table() %>%
round(3) %>% expect_profit()
table(Prediction = pred_test$pred, Actual = pred_test$actual) %>%
prop.table() %>%
round(3)
expect_profit <- function(x){
profit <- x["Yes","Yes"]*490 +  x["No", "Yes"]*0 + x["Yes","No"]*(-20) + x["No","Yes"]*(-50)
return(profit)
}
table(Prediction = pred_test$pred, Actual = pred_test$actual) %>%
prop.table() %>%
round(3) %>% expect_profit()
table(Prediction = pred_test$pred, Actual = pred_test$actual) %>%
prop.table() %>%
round(3)
table(Prediction = pred_test$pred, Actual = pred_test$actual) %>%
prop.table() %>%
round(3) %>% expect_profit()
table(Prediction = pred_test$pred, Actual = pred_test$actual) %>%
prop.table() %>%
round(3)
expect_profit <- function(x){
profit <- x["Yes","Yes"]*490 +  x["No", "Yes"]*0 + x["Yes","No"]*(-20) + x["No","Yes"]*(-50)
return(profit)
}
profit_value <- matrix(nrow = nrow(pred_test), ncol = 3)
# sort data
pred_test <- pred_test %>% arrange(desc(Yes))
# Sample 100 different thresholds
for (i in seq(1, nrow(pred_test), nrow(pred_test)*0.01)) {
# set threshold
thres <- pred_test$Yes[i]
profit_value[i, 1] <- thres
# classify
pred_test <- pred_test %>%
mutate(predicted = ifelse(Yes < thres, "No", "Yes"))
profit_value[i, 2] <- pred_test %>% filter(predicted == "Yes") %>% nrow()/nrow(pred_test)
# expected profit
confuse <- table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table()
profit_value[i, 3] <- expect_profit(confuse)
}
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table()
profit_value <- profit_value %>%
as.data.frame() %>%
`colnames<-`(c("threshold", "percent_yes", "expected_profit"))
# Get threshold with maximum profit
max_profit <- profit_value %>%
arrange(desc(expected_profit)) %>%
slice(1)
current_profit <- profit_value %>%
arrange(threshold) %>%
filter(threshold >= 0.5) %>%
slice(1)
# Visualize the result
profit_value %>%
ggplot(aes(threshold, expected_profit)) +
geom_line(color = "firebrick") +
geom_hline(yintercept = 0, linetype = "dashed", color = "skyblue4") +
geom_vline(xintercept = 0.5, linetype = "dashed", color = "skyblue4") +
geom_vline(xintercept = max_profit$threshold, linetype = "dashed", color = "green") +
geom_point(data = max_profit, size = 3) +
ggrepel::geom_text_repel(data= max_profit, box.padding = 3, nudge_x = 0.1,
aes(label = glue::glue("Max Profit
{comma(expected_profit, accuracy = 0.01)}"))
) +
geom_point(data = current_profit, size = 3) +
ggrepel::geom_text_repel(data= current_profit, box.padding = 2, nudge_x = 0.1,
aes(label = glue::glue("Current Profit
{comma(expected_profit, accuracy = 0.01)}"))
) +
theme_minimal() +
theme(panel.grid.minor = element_blank()) +
labs(title = "Profit Curve",
x = "Threshold", y = "Expected Profit")
table(Prediction = pred_test$pred, Actual = pred_test$actual) %>%
prop.table() %>%
round(3)
expect_profit <- function(x){
profit <- x["Yes","Yes"]*490 +  x["No", "Yes"]*0 + x["Yes","No"]*(-20) + x["No","Yes"]*(-50)
return(profit)
}
profit_value <- matrix(nrow = nrow(pred_test), ncol = 3)
pred_test
# sort data
pred_test <- pred_test %>% arrange(desc(Yes))
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table()
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table() %>% matrix()
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table() %>% matrix(nrow = 2, ncol = 2)
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table()
expect_profit(confuse)
confuse
confuse %>% rbind(c(0,0))
confuse %>% rbind(c(0,0)) %>% `rownames<-`(c("Yes","No"))
profit_value <- matrix(nrow = nrow(pred_test), ncol = 3)
# sort data
pred_test <- pred_test %>% arrange(desc(Yes))
# Sample 100 different thresholds
for (i in seq(1, nrow(pred_test), nrow(pred_test)*0.01)) {
# set threshold
thres <- pred_test$Yes[i]
profit_value[i, 1] <- thres
# classify
pred_test <- pred_test %>%
mutate(predicted = ifelse(Yes < thres, "No", "Yes"))
profit_value[i, 2] <- pred_test %>% filter(predicted == "Yes") %>% nrow()/nrow(pred_test)
# expected profit
confuse <- table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table() %>% function(x){
if (nrow(x) == 1) {
x %>% rbind(c(0,0)) %>% `rownames<-`(c("Yes","No"))
}
profit_value[i, 3] <- expect_profit(confuse)
}
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table()
profit_value <- profit_value %>%
as.data.frame() %>%
`colnames<-`(c("threshold", "percent_yes", "expected_profit"))
# Get threshold with maximum profit
max_profit <- profit_value %>%
arrange(desc(expected_profit)) %>%
slice(1)
current_profit <- profit_value %>%
arrange(threshold) %>%
filter(threshold >= 0.5) %>%
slice(1)
# Visualize the result
profit_value %>%
ggplot(aes(threshold, expected_profit)) +
geom_line(color = "firebrick") +
geom_hline(yintercept = 0, linetype = "dashed", color = "skyblue4") +
geom_vline(xintercept = 0.5, linetype = "dashed", color = "skyblue4") +
geom_vline(xintercept = max_profit$threshold, linetype = "dashed", color = "green") +
geom_point(data = max_profit, size = 3) +
ggrepel::geom_text_repel(data= max_profit, box.padding = 3, nudge_x = 0.1,
aes(label = glue::glue("Max Profit
{comma(expected_profit, accuracy = 0.01)}"))
) +
geom_point(data = current_profit, size = 3) +
ggrepel::geom_text_repel(data= current_profit, box.padding = 2, nudge_x = 0.1,
aes(label = glue::glue("Current Profit
{comma(expected_profit, accuracy = 0.01)}"))
) +
theme_minimal() +
theme(panel.grid.minor = element_blank()) +
labs(title = "Profit Curve",
x = "Threshold", y = "Expected Profit")
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table() %>% function(x){
if (nrow(x) == 1) {
x %>% rbind(c(0,0)) %>% `rownames<-`(c("Yes","No"))
}
k
}
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table() %>% function(x){
if (nrow(x) == 1) {
x %>% rbind(c(0,0)) %>% `rownames<-`(c("Yes","No"))
}
}
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table() %>% function(x){
if (nrow(x) == 1) {
x %>% rbind(c(0,0)) %>% `rownames<-`(c("Yes","No"))
}
}
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table() %>% function(x){
if (nrow(x) == 1) {
x %>% rbind(c(0,0)) %>% `rownames<-`(c("Yes","No"))
}
}
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table() %>% do(function(x){
if (nrow(x) == 1) {
x %>% rbind(c(0,0)) %>% `rownames<-`(c("Yes","No"))
}
})
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table() %>% do(., function(x){
if (nrow(x) == 1) {
x %>% rbind(c(0,0)) %>% `rownames<-`(c("Yes","No"))
}
})
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table() %>% do.call(., function(x){
if (nrow(x) == 1) {
x %>% rbind(c(0,0)) %>% `rownames<-`(c("Yes","No"))
}
})
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table() %>% do.call(function(x){
if (nrow(x) == 1) {
x %>% rbind(c(0,0)) %>% `rownames<-`(c("Yes","No"))
}
})
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table() %>% do.call(function(x){
if (nrow(x) == 1) {
x %>% rbind(c(0,0)) %>% `rownames<-`(c("Yes","No"))
}
}, args = list(x = .))
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table() %>% do.call(function(x){
if (nrow(x) == 1) {
x %>% rbind(c(0,0)) %>% `rownames<-`(c("Yes","No"))
}
})
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table() %>% function(x){
if (nrow(x) == 1) {
x %>% rbind(c(0,0)) %>% `rownames<-`(c("Yes","No"))
}
}
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table() %>% {function(x){
if (nrow(x) == 1) {
x %>% rbind(c(0,0)) %>% `rownames<-`(c("Yes","No"))
}
}}
matrix(0L, nrow = 2, ncol = 2)
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table() %>%
rbind(matrix(0L, nrow = 2, ncol = 2))
matrix(0L, nrow = 2, ncol = 2) %>% `rownames<-`(c("Yes", "No"))
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table() %>%
rbind(matrix(0L, nrow = 2, ncol = 2) %>% `rownames<-`(c("Yes", "No")))
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table() %>%
rbind(matrix(0L, nrow = 2, ncol = 2) %>% `rownames<-`(c("Yes", "No"))) %>%
slice(2)
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table() %>%
rbind(matrix(0L, nrow = 2, ncol = 2) %>% `rownames<-`(c("Yes", "No"))) %>%
as.data.frame() %>%
slice(2)
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table() %>%
rbind(matrix(0L, nrow = 2, ncol = 2) %>% `rownames<-`(c("Yes", "No"))) %>%
as.data.frame() %>%
slice(-2)
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table() %>%
rbind(matrix(0L, nrow = 2, ncol = 2) %>% `rownames<-`(c("Yes", "No")))
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table() %>%
rbind(matrix(0L, nrow = 2, ncol = 2) %>% `rownames<-`(c("Yes", "No"))) %>%
unique()
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table() %>%
rbind(matrix(0L, nrow = 2, ncol = 2) %>% `rownames<-`(c("Yes", "No")))
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table() %>%
rbind(matrix(0L, nrow = 2, ncol = 2) %>% `rownames<-`(c("Yes", "No"))) %>%
duplicated()
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table() %>%
rbind(matrix(0L, nrow = 2, ncol = 2) %>% `rownames<-`(c("No", "Yes")))
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table() %>%
rbind(matrix(0L, nrow = 2, ncol = 2) %>% `rownames<-`(c("No", "Yes"))) %>%
unique()
profit_value <- matrix(nrow = nrow(pred_test), ncol = 3)
# sort data
pred_test <- pred_test %>% arrange(desc(Yes))
# Sample 100 different thresholds
for (i in seq(1, nrow(pred_test), nrow(pred_test)*0.01)) {
# set threshold
thres <- pred_test$Yes[i]
profit_value[i, 1] <- thres
# classify
pred_test <- pred_test %>%
mutate(predicted = ifelse(Yes < thres, "No", "Yes"))
profit_value[i, 2] <- pred_test %>% filter(predicted == "Yes") %>% nrow()/nrow(pred_test)
# expected profit
confuse <- table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table() %>%
rbind(matrix(0L, nrow = 2, ncol = 2) %>% `rownames<-`(c("No", "Yes"))) %>%
unique()
profit_value[i, 3] <- expect_profit(confuse)
}
table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table()
profit_value <- profit_value %>%
as.data.frame() %>%
`colnames<-`(c("threshold", "percent_yes", "expected_profit"))
# Get threshold with maximum profit
max_profit <- profit_value %>%
arrange(desc(expected_profit)) %>%
slice(1)
current_profit <- profit_value %>%
arrange(threshold) %>%
filter(threshold >= 0.5) %>%
slice(1)
# Visualize the result
profit_value %>%
ggplot(aes(threshold, expected_profit)) +
geom_line(color = "firebrick") +
geom_hline(yintercept = 0, linetype = "dashed", color = "skyblue4") +
geom_vline(xintercept = 0.5, linetype = "dashed", color = "skyblue4") +
geom_vline(xintercept = max_profit$threshold, linetype = "dashed", color = "green") +
geom_point(data = max_profit, size = 3) +
ggrepel::geom_text_repel(data= max_profit, box.padding = 3, nudge_x = 0.1,
aes(label = glue::glue("Max Profit
{comma(expected_profit, accuracy = 0.01)}"))
) +
geom_point(data = current_profit, size = 3) +
ggrepel::geom_text_repel(data= current_profit, box.padding = 2, nudge_x = 0.1,
aes(label = glue::glue("Current Profit
{comma(expected_profit, accuracy = 0.01)}"))
) +
theme_minimal() +
theme(panel.grid.minor = element_blank()) +
labs(title = "Profit Curve",
x = "Threshold", y = "Expected Profit")
# Visualize the result
profit_value %>%
ggplot(aes(threshold, expected_profit)) +
geom_line(color = "firebrick") +
geom_hline(yintercept = 0, linetype = "dashed", color = "skyblue4") +
geom_vline(xintercept = 0.5, linetype = "dashed", color = "skyblue4") +
geom_vline(xintercept = max_profit$threshold, linetype = "dashed", color = "green") +
geom_point(data = max_profit, size = 3) +
ggrepel::geom_text_repel(data= max_profit, box.padding = 3, nudge_x = 0.1,
aes(label = glue::glue("Max Profit
{comma(expected_profit, accuracy = 0.01)}"))
) +
geom_point(data = current_profit, size = 3) +
ggrepel::geom_text_repel(data= current_profit, box.padding = 2, nudge_x = 0.1,
aes(label = glue::glue("Current Profit
{comma(expected_profit, accuracy = 0.01)}"))
) +
theme_minimal() +
theme(panel.grid.minor = element_blank()) +
labs(title = "Profit Curve",
x = "Threshold", y = "Expected Profit")
rec <- recipe(training(index)) %>%
step_downsample(went_on_backorder, under_ratio = 5, seed = 123) %>%
step_upsample(went_on_backorder, seed = 123) %>%
step_nzv(all_numeric()) %>%
step_scale(all_numeric()) %>%
prep()
data_train <- juice(rec)
data_test <- bake(rec, testing(index))
table(data_train$went_on_backorder) %>%
prop.table()
rf_model
rec <- recipe(training(index)) %>%
step_downsample(went_on_backorder, under_ratio = 5, seed = 123) %>%
step_upsample(went_on_backorder, seed = 123) %>%
step_nzv(all_numeric()) %>%
step_scale(all_numeric()) %>%
prep()
data_train <- juice(rec)
data_test <- bake(rec, testing(index))
table(data_train$went_on_backorder) %>%
prop.table()
set.seed(123)
ctrl <- trainControl(method = "repeatedcv",
number = 10, repeats = 3, allowParallel = T)
rf_model <- train(went_on_backorder ~.,
data = data_train,
method = "rf", trControl = ctrl)
rf_model$finalModel
pred_test <- data.frame(actual = data_test$went_on_backorder) %>%
bind_cols(pred = predict(rf_model, data_test)) %>%
bind_cols(prob = predict(rf_model, data_test, type = "prob"))
pred_test %>%
summarise(Accuracy = accuracy_vec(actual, pred) %>% percent(accuracy = 0.001),
Recall = sens_vec(actual, pred) %>% percent(accuracy = 0.001),
Specificity = spec_vec(actual, pred) %>% percent(accuracy = 0.001),
Precision = precision_vec(actual, pred) %>% percent(accuracy = 0.001))
pred_test %>%
roc_auc(actual, Yes)
profit_value <- matrix(nrow = nrow(pred_test), ncol = 3)
# sort data
pred_test <- pred_test %>% arrange(desc(Yes))
# Sample 100 different thresholds
for (i in seq(1, nrow(pred_test), nrow(pred_test)*0.01)) {
# set threshold
thres <- pred_test$Yes[i]
profit_value[i, 1] <- thres
# classify
pred_test <- pred_test %>%
mutate(predicted = ifelse(Yes < thres, "No", "Yes"))
profit_value[i, 2] <- pred_test %>% filter(predicted == "Yes") %>% nrow()/nrow(pred_test)
# expected profit
confuse <- table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table() %>%
rbind(matrix(0L, nrow = 2, ncol = 2) %>% `rownames<-`(c("No", "Yes"))) %>%
unique()
profit_value[i, 3] <- expect_profit(confuse)
}
profit_value <- profit_value %>%
as.data.frame() %>%
`colnames<-`(c("threshold", "percent_yes", "expected_profit"))
# Get threshold with maximum profit
max_profit <- profit_value %>%
arrange(desc(expected_profit)) %>%
slice(1)
current_profit <- profit_value %>%
arrange(threshold) %>%
filter(threshold >= 0.5) %>%
slice(1)
# Visualize the result
profit_value %>%
ggplot(aes(threshold, expected_profit)) +
geom_line(color = "firebrick") +
geom_hline(yintercept = 0, linetype = "dashed", color = "skyblue4") +
geom_vline(xintercept = 0.5, linetype = "dashed", color = "skyblue4") +
geom_vline(xintercept = max_profit$threshold, linetype = "dashed", color = "green") +
geom_point(data = max_profit, size = 3) +
ggrepel::geom_text_repel(data= max_profit, box.padding = 3, nudge_x = 0.1,
aes(label = glue::glue("Max Profit
{comma(expected_profit, accuracy = 0.01)}"))
) +
geom_point(data = current_profit, size = 3) +
ggrepel::geom_text_repel(data= current_profit, box.padding = 2, nudge_x = 0.1,
aes(label = glue::glue("Current Profit
{comma(expected_profit, accuracy = 0.01)}"))
) +
theme_minimal() +
theme(panel.grid.minor = element_blank()) +
labs(title = "Profit Curve",
x = "Threshold", y = "Expected Profit")
saveRDS(rf_model, "rf_model2.Rds")
rec <- recipe(training(index)) %>%
step_downsample(went_on_backorder, seed = 123) %>%
step_scale(all_numeric()) %>%
prep()
data_train <- juice(rec)
data_test <- bake(rec, testing(index))
table(data_train$went_on_backorder) %>% prop.table()
dim(data_train)
set.seed(123)
ctrl <- trainControl(method = "repeatedcv",
number = 10, repeats = 3, allowParallel = T)
rf_model <- train(went_on_backorder ~.,
data = data_train,
method = "rf", trControl = ctrl)
rf_model$finalModel
saveRDS(rf_model, "rf_model.Rds")
knitr::opts_chunk$set(echo = TRUE,
eval = T,
fig.align = "center")
rf_model <- read_rds("rf_model.Rds")
library(readr)
rf_model <- read_rds("rf_model.Rds")
rf_model$finalModel
rf_model$finalModel %>% summary()
library(dplyr)
rf_model$finalModel %>% summary()
rf_model$finalModel
rf_model$finalModel$err.rate
summary(rf_model)
rf_model
pred_test <- data.frame(actual = data_test$went_on_backorder) %>%
bind_cols(pred = predict(rf_model, data_test)) %>%
bind_cols(prob = predict(rf_model, data_test, type = "prob"))
rf_model <- read_rds("rf_model2.Rds")
rf_model
