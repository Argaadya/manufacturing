for (i in 1:100) {
# set threshold
thres <- pred_test$.pred_Yes[i]
profit_value[i, 1] <- thres
# classify
pred_test <- pred_test %>%
mutate(predicted = ifelse(.pred_Yes < thres, "No", "Yes"))
profit_value[i, 2] <- pred_test %>% filter(predicted == "Yes") %>% nrow()/nrow(pred_test)
# expected profit
confuse <- table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table()
profit_value[i, 3] <- expect_profit(confuse)
}
profit_value <- profit_value %>%
as.data.frame() %>%
`colnames<-`(c("threshold", "percent_yes", "expected_profit"))
profit_value %>%
ggplot(aes(percent_yes, expected_profit)) +
geom_line() +
geom_hline(yintercept = 0, linetype = "dashed") +
theme_minimal()
0.0002*nrow(pred_test)
profit_value <- matrix(nrow = nrow(pred_test), ncol = 3)
# sort data
pred_test <- pred_test %>% arrange(desc(.pred_Yes))
for (i in 1000:1100) {
# set threshold
thres <- pred_test$.pred_Yes[i]
profit_value[i, 1] <- thres
# classify
pred_test <- pred_test %>%
mutate(predicted = ifelse(.pred_Yes < thres, "No", "Yes"))
profit_value[i, 2] <- pred_test %>% filter(predicted == "Yes") %>% nrow()/nrow(pred_test)
# expected profit
confuse <- table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table()
profit_value[i, 3] <- expect_profit(confuse)
}
profit_value <- profit_value %>%
as.data.frame() %>%
`colnames<-`(c("threshold", "percent_yes", "expected_profit"))
profit_value %>%
ggplot(aes(percent_yes, expected_profit)) +
geom_line() +
geom_hline(yintercept = 0, linetype = "dashed") +
theme_minimal()
rec <- recipe(training(index)) %>%
step_downsample(went_on_backorder, seed = 123, under_ratio = 9) %>%
step_scale(all_numeric()) %>%
prep()
data_train <- juice(rec)
data_test <- bake(rec, testing(index))
table(data_train$went_on_backorder) %>% prop.table()
# define model spec
model_spec <- rand_forest(mode = "classification",
mtry = 3,
trees = 500,
min_n = 1)
# define model engine
model_spec <- set_engine(model_spec, engine = "ranger", seed = 123,
num.threads = parallel::detectCores(),
importance = "impurity")
# model fitting
set.seed(123)
rf_model <- fit_xy(object = model_spec,
x = data_train %>% select(-went_on_backorder),
y = data_train$went_on_backorder)
rf_model
pred_test <- data.frame(actual = data_test$went_on_backorder) %>%
bind_cols(pred = predict(rf_model, data_test)) %>%
bind_cols(prob = predict(rf_model, data_test, type = "prob"))
table(Prediction = pred_test$.pred_class,
Actual = pred_test$actual)
pred_test %>%
summarise(Accuracy = accuracy_vec(actual, .pred_class) %>% scales::percent(accuracy = 0.001),
Recall = sens_vec(actual, .pred_class) %>% scales::percent(accuracy = 0.001),
Specificity = spec_vec(actual, .pred_class) %>% scales::percent(accuracy = 0.001),
Precision = precision_vec(actual, .pred_class) %>% scales::percent(accuracy = 0.001))
pred_test %>%
roc_curve(actual, .pred_Yes) %>%
autoplot() +
theme_minimal() +
scale_x_continuous(breaks = seq(0,1,0.2))+
scale_y_continuous(breaks = seq(0,1,0.2))+
labs(x = "False Positive Rate",
y = "True Positive Rate",
title = "ROC Curve of Random Forest")
pred_test %>%
roc_auc(actual, .pred_Yes)
pred_test %>%
pr_curve(actual, .pred_Yes) %>%
autoplot() +
theme_minimal() +
scale_x_continuous(breaks = seq(0,1,0.2))+
scale_y_continuous(breaks = seq(0,1,0.2))+
labs(x = "Recall",
y = "Precision",
title = "Precision-Recall Curve of Random Forest")
pred_test %>%
pr_curve(actual, .pred_Yes) %>%
autoplot() +
theme_minimal() +
scale_x_continuous(breaks = seq(0,1,0.2), limits = c(-1,1))+
scale_y_continuous(breaks = seq(0,1,0.2))+
labs(x = "Recall",
y = "Precision",
title = "Precision-Recall Curve of Random Forest")
pred_test %>%
pr_curve(actual, .pred_Yes) %>%
autoplot() +
theme_minimal() +
scale_x_continuous(breaks = seq(0,1,0.2))+
scale_y_continuous(breaks = seq(0,1,0.2))+
labs(x = "Recall",
y = "Precision",
title = "Precision-Recall Curve of Random Forest")
profit_value <- matrix(nrow = nrow(pred_test), ncol = 3)
# sort data
pred_test <- pred_test %>% arrange(desc(.pred_Yes))
for (i in 1:100) {
# set threshold
thres <- pred_test$.pred_Yes[i]
profit_value[i, 1] <- thres
# classify
pred_test <- pred_test %>%
mutate(predicted = ifelse(.pred_Yes < thres, "No", "Yes"))
profit_value[i, 2] <- pred_test %>% filter(predicted == "Yes") %>% nrow()/nrow(pred_test)
# expected profit
confuse <- table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table()
profit_value[i, 3] <- expect_profit(confuse)
}
profit_value <- profit_value %>%
as.data.frame() %>%
`colnames<-`(c("threshold", "percent_yes", "expected_profit"))
profit_value %>%
ggplot(aes(percent_yes, expected_profit)) +
geom_line() +
geom_hline(yintercept = 0, linetype = "dashed") +
theme_minimal()
profit_value <- matrix(nrow = nrow(pred_test), ncol = 3)
# sort data
pred_test <- pred_test %>% arrange(desc(.pred_Yes))
for (i in seq(1,1000,10)) {
# set threshold
thres <- pred_test$.pred_Yes[i]
profit_value[i, 1] <- thres
# classify
pred_test <- pred_test %>%
mutate(predicted = ifelse(.pred_Yes < thres, "No", "Yes"))
profit_value[i, 2] <- pred_test %>% filter(predicted == "Yes") %>% nrow()/nrow(pred_test)
# expected profit
confuse <- table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table()
profit_value[i, 3] <- expect_profit(confuse)
}
profit_value <- profit_value %>%
as.data.frame() %>%
`colnames<-`(c("threshold", "percent_yes", "expected_profit"))
profit_value %>%
ggplot(aes(percent_yes, expected_profit)) +
geom_line() +
geom_hline(yintercept = 0, linetype = "dashed") +
theme_minimal()
profit_value <- matrix(nrow = nrow(pred_test), ncol = 3)
# sort data
pred_test <- pred_test %>% arrange(desc(.pred_Yes))
for (i in seq(1,5000,50)) {
# set threshold
thres <- pred_test$.pred_Yes[i]
profit_value[i, 1] <- thres
# classify
pred_test <- pred_test %>%
mutate(predicted = ifelse(.pred_Yes < thres, "No", "Yes"))
profit_value[i, 2] <- pred_test %>% filter(predicted == "Yes") %>% nrow()/nrow(pred_test)
# expected profit
confuse <- table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table()
profit_value[i, 3] <- expect_profit(confuse)
}
profit_value <- profit_value %>%
as.data.frame() %>%
`colnames<-`(c("threshold", "percent_yes", "expected_profit"))
profit_value %>%
ggplot(aes(percent_yes, expected_profit)) +
geom_line() +
geom_hline(yintercept = 0, linetype = "dashed") +
theme_minimal()
nrow(pred_test)
expect_profit <- function(x){
profit <- x[2,1]*400 +  x[1,2]*0 + x[2,2]*(-10) + x[1,1]*(-50)
return(profit)
}
expect_profit <- function(x){
profit <- x[2,1]*400 +  x[1,2]*0 + x[2,2]*(-10) + x[1,1]*(-50)
return(profit)
}
profit_value <- matrix(nrow = nrow(pred_test), ncol = 3)
# sort data
pred_test <- pred_test %>% arrange(desc(.pred_Yes))
for (i in seq(1, 5000, 50)) {
# set threshold
thres <- pred_test$.pred_Yes[i]
profit_value[i, 1] <- thres
# classify
pred_test <- pred_test %>%
mutate(predicted = ifelse(.pred_Yes < thres, "No", "Yes"))
profit_value[i, 2] <- pred_test %>% filter(predicted == "Yes") %>% nrow()/nrow(pred_test)
# expected profit
confuse <- table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table()
profit_value[i, 3] <- expect_profit(confuse)
}
profit_value <- profit_value %>%
as.data.frame() %>%
`colnames<-`(c("threshold", "percent_yes", "expected_profit"))
profit_value %>%
ggplot(aes(percent_yes, expected_profit)) +
geom_line() +
geom_hline(yintercept = 0, linetype = "dashed") +
theme_minimal()
rec <- recipe(training(index)) %>%
step_downsample(went_on_backorder, seed = 123) %>%
step_scale(all_numeric()) %>%
prep()
data_train <- juice(rec)
data_test <- bake(rec, testing(index))
table(data_train$went_on_backorder) %>% prop.table()
# define model spec
model_spec <- rand_forest(mode = "classification",
mtry = 3,
trees = 500,
min_n = 1)
# define model engine
model_spec <- set_engine(model_spec, engine = "ranger", seed = 123,
num.threads = parallel::detectCores(),
importance = "impurity")
# model fitting
set.seed(123)
rf_model <- fit_xy(object = model_spec,
x = data_train %>% select(-went_on_backorder),
y = data_train$went_on_backorder)
rf_model
pred_test <- data.frame(actual = data_test$went_on_backorder) %>%
bind_cols(pred = predict(rf_model, data_test)) %>%
bind_cols(prob = predict(rf_model, data_test, type = "prob"))
table(Prediction = pred_test$.pred_class,
Actual = pred_test$actual)
pred_test %>%
summarise(Accuracy = accuracy_vec(actual, .pred_class) %>% scales::percent(accuracy = 0.001),
Recall = sens_vec(actual, .pred_class) %>% scales::percent(accuracy = 0.001),
Specificity = spec_vec(actual, .pred_class) %>% scales::percent(accuracy = 0.001),
Precision = precision_vec(actual, .pred_class) %>% scales::percent(accuracy = 0.001))
pred_test %>%
roc_auc(actual, .pred_Yes)
pred_test %>%
pr_curve(actual, .pred_Yes) %>%
autoplot() +
theme_minimal() +
scale_x_continuous(breaks = seq(0,1,0.2))+
scale_y_continuous(breaks = seq(0,1,0.2))+
labs(x = "Recall",
y = "Precision",
title = "Precision-Recall Curve of Random Forest")
expect_profit <- function(x){
profit <- x[2,1]*400 +  x[1,2]*0 + x[2,2]*(-10) + x[1,1]*(-50)
return(profit)
}
profit_value <- matrix(nrow = nrow(pred_test), ncol = 3)
# sort data
pred_test <- pred_test %>% arrange(desc(.pred_Yes))
for (i in seq(1, 10000, 100)) {
# set threshold
thres <- pred_test$.pred_Yes[i]
profit_value[i, 1] <- thres
# classify
pred_test <- pred_test %>%
mutate(predicted = ifelse(.pred_Yes < thres, "No", "Yes"))
profit_value[i, 2] <- pred_test %>% filter(predicted == "Yes") %>% nrow()/nrow(pred_test)
# expected profit
confuse <- table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table()
profit_value[i, 3] <- expect_profit(confuse)
}
profit_value <- profit_value %>%
as.data.frame() %>%
`colnames<-`(c("threshold", "percent_yes", "expected_profit"))
profit_value %>%
ggplot(aes(percent_yes, expected_profit)) +
geom_line() +
geom_hline(yintercept = 0, linetype = "dashed") +
theme_minimal()
nrow(pred_test)
nrow(pred_test)/1000
nrow(pred_test)/2000
profit_value <- matrix(nrow = nrow(pred_test), ncol = 3)
# sort data
pred_test <- pred_test %>% arrange(desc(.pred_Yes))
for (i in seq(1, nrow(pred_test), 2000)) {
# set threshold
thres <- pred_test$.pred_Yes[i]
profit_value[i, 1] <- thres
# classify
pred_test <- pred_test %>%
mutate(predicted = ifelse(.pred_Yes < thres, "No", "Yes"))
profit_value[i, 2] <- pred_test %>% filter(predicted == "Yes") %>% nrow()/nrow(pred_test)
# expected profit
confuse <- table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table()
profit_value[i, 3] <- expect_profit(confuse)
}
profit_value <- profit_value %>%
as.data.frame() %>%
`colnames<-`(c("threshold", "percent_yes", "expected_profit"))
profit_value %>%
ggplot(aes(percent_yes, expected_profit)) +
geom_line() +
geom_hline(yintercept = 0, linetype = "dashed") +
theme_minimal()
profit_value
profit_value %>%
ggplot(aes(threshold, expected_profit)) +
geom_line() +
geom_hline(yintercept = 0, linetype = "dashed") +
theme_minimal()
profit_value %>%
ggplot(aes(threshold, expected_profit)) +
geom_line() +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_y_continuous(breaks = seq(-10,10, 1)) +
theme_minimal()
profit_value %>%
ggplot(aes(threshold, expected_profit)) +
geom_line() +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_y_continuous(breaks = seq(-10,10, 1)) +
theme_minimal()+
theme(panel.grid = element_blank())
profit_value %>%
arrange(desc(expected_profit))
pred_test %>%
pr_curve(actual, .pred_Yes)
pred_test %>%
pr_curve(actual, .pred_Yes) %>%
ggplot(aes(x = .threshold)) +
geom_line(aes(y = recall))
pred_test %>%
pr_curve(actual, .pred_Yes) %>%
ggplot(aes(x = .threshold)) +
geom_line(aes(y = recall)) +
geom_line(aes(y = precision)) +
theme_minimal() +
scale_x_continuous(breaks = seq(0,1,0.2))+
scale_y_continuous(breaks = seq(0,1,0.2))+
labs(x = "Recall",
y = "Precision",
title = "Precision-Recall Curve of Random Forest")
pred_test %>%
pr_curve(actual, .pred_Yes) %>%
pivot_longer(c(recall, precision),
names_to = "metric")
pred_test %>%
pr_curve(actual, .pred_Yes) %>%
filter(.threshold < Inf)
pred_test %>%
pr_curve(actual, .pred_Yes) %>%
filter(.threshold < Inf) %>%
pivot_longer(c(recall, precision),
names_to = "metric") %>%
ggplot(aes(x = .threshold)) +
geom_line(aes(y = recall)) +
geom_line(aes(y = precision)) +
theme_minimal() +
scale_x_continuous(breaks = seq(0,1,0.2))+
scale_y_continuous(breaks = seq(0,1,0.2))+
labs(x = "Threshold",
title = "Precision-Recall Curve of Random Forest")
pred_test %>%
pr_curve(actual, .pred_Yes) %>%
filter(.threshold < Inf) %>%
pivot_longer(c(recall, precision),
names_to = "metric")
pred_test %>%
pr_curve(actual, .pred_Yes) %>%
filter(.threshold < Inf) %>%
pivot_longer(c(recall, precision),
names_to = "metric") %>%
ggplot(aes(.threshold, value, color = metric)) +
theme_minimal() +
scale_x_continuous(breaks = seq(0,1,0.2))+
scale_y_continuous(breaks = seq(0,1,0.2))+
labs(x = "Threshold",
title = "Precision-Recall Curve of Random Forest")
pred_test %>%
pr_curve(actual, .pred_Yes) %>%
filter(.threshold < Inf) %>%
pivot_longer(c(recall, precision),
names_to = "metric") %>%
ggplot(aes(.threshold, value, color = metric)) +
geom_line()+
theme_minimal() +
scale_x_continuous(breaks = seq(0,1,0.2))+
scale_y_continuous(breaks = seq(0,1,0.2))+
labs(x = "Threshold",
title = "Precision-Recall Curve of Random Forest")
pred_test %>%
pr_curve(actual, .pred_Yes) %>%
filter(.threshold < Inf) %>%
pivot_longer(c(recall, precision),
names_to = "metric") %>%
ggplot(aes(.threshold, value, color = metric)) +
geom_line()+
theme_minimal() +
scale_x_continuous(breaks = seq(0,1,0.1))+
scale_y_continuous(breaks = seq(0,1,0.2))+
labs(x = "Threshold",
title = "Precision-Recall Curve of Random Forest")
pred_test %>%
pr_curve(actual, .pred_Yes) %>%
filter(.threshold < Inf) %>%
pivot_longer(c(recall, precision),
names_to = "metric") %>%
ggplot(aes(.threshold, value, color = metric)) +
geom_line()+
theme_minimal() +
theme(panel.grid.minor = element_blank())+
scale_x_continuous(breaks = seq(0,1,0.1))+
scale_y_continuous(breaks = seq(0,1,0.2))+
labs(x = "Threshold",
y = NULL,
title = "Precision-Recall Curve of Random Forest")
profit_value %>%
ggplot(aes(threshold, expected_profit)) +
geom_line(color = "skyblue", size = 2) +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_y_continuous(breaks = seq(-10,10, 1)) +
theme_minimal()+
theme(panel.grid.minor = element_blank())
profit_value %>%
ggplot(aes(threshold, expected_profit)) +
geom_line(color = "skyblue", size = 1) +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_y_continuous(breaks = seq(-10,10, 1)) +
theme_minimal()+
theme(panel.grid.minor = element_blank())
profit_value %>%
ggplot(aes(threshold, expected_profit)) +
geom_line(color = "firebrick", size = 1) +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_y_continuous(breaks = seq(-10,10, 1)) +
theme_minimal()+
theme(panel.grid.minor = element_blank())
profit_value %>%
ggplot(aes(threshold, expected_profit)) +
geom_line(color = "firebrick", size = 1) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = = 0.5, linetype = "dashed") +
profit_value %>%
ggplot(aes(threshold, expected_profit)) +
geom_line(color = "firebrick", size = 1) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = 0.5, linetype = "dashed") +
scale_y_continuous(breaks = seq(-10,10, 1)) +
theme_minimal()+
theme(panel.grid.minor = element_blank())
profit_value %>%
ggplot(aes(threshold, expected_profit)) +
geom_line(color = "firebrick", size = 1) +
geom_hline(yintercept = 0, linetype = "dashed", color = "skyblue") +
geom_vline(xintercept = 0.5, linetype = "dashed", color = "skyblue") +
scale_y_continuous(breaks = seq(-10,10, 1)) +
theme_minimal()+
theme(panel.grid.minor = element_blank())
profit_value %>%
ggplot(aes(threshold, expected_profit)) +
geom_line(color = "firebrick", size = 1) +
geom_hline(yintercept = 0, linetype = "dashed", color = "skyblue4") +
geom_vline(xintercept = 0.5, linetype = "dashed", color = "skyblue4") +
scale_y_continuous(breaks = seq(-10,10, 1)) +
theme_minimal()+
theme(panel.grid.minor = element_blank())
expect_profit <- function(x){
profit <- x[2,1]*500 +  x[1,2]*0 + x[2,2]*(-10) + x[1,1]*(-50)
return(profit)
}
profit_value <- matrix(nrow = nrow(pred_test), ncol = 3)
# sort data
pred_test <- pred_test %>% arrange(desc(.pred_Yes))
for (i in seq(1, nrow(pred_test), 2000)) {
# set threshold
thres <- pred_test$.pred_Yes[i]
profit_value[i, 1] <- thres
# classify
pred_test <- pred_test %>%
mutate(predicted = ifelse(.pred_Yes < thres, "No", "Yes"))
profit_value[i, 2] <- pred_test %>% filter(predicted == "Yes") %>% nrow()/nrow(pred_test)
# expected profit
confuse <- table(Prediction = pred_test$predicted, Actual = pred_test$actual) %>%
prop.table()
profit_value[i, 3] <- expect_profit(confuse)
}
profit_value <- profit_value %>%
as.data.frame() %>%
`colnames<-`(c("threshold", "percent_yes", "expected_profit"))
profit_value %>%
ggplot(aes(threshold, expected_profit)) +
geom_line(color = "firebrick", size = 1) +
geom_hline(yintercept = 0, linetype = "dashed", color = "skyblue4") +
geom_vline(xintercept = 0.5, linetype = "dashed", color = "skyblue4") +
scale_y_continuous(breaks = seq(-10,10, 2)) +
theme_minimal()+
theme(panel.grid.minor = element_blank())
